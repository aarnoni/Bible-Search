import discord
from discord.ext import commands
import os
import requests
from unidecode import unidecode
import random
from datetime import datetime, timedelta
import asyncio
import time
from googleapiclient.discovery import build
import sqlite3
import unicodedata

# AUTORIZA√á√ïES
intents = discord.Intents.default()
intents.members = True
client = commands.Bot(command_prefix='-', intents=discord.Intents.all())

# Chave da API do YouTube
YOUTUBE_API_KEY = AI_apik

# Cria√ß√£o do cliente YouTube
youtube = build('youtube', 'v3', developerKey = YOUTUBE_API_KEY)

# Lista de IDs de playlists fixas
PLAYLISTS_FIXAS = [
    "PLWr4uRWd6xgAqEmGetVUlLJo-xSLEOUaz",  # Joshua Aaron
    "OLAK5uy_nYNMvR6Cy2MwBGurXcntDKW2-pvJl8AlU",  # Grupo Elo
    "OLAK5uy_no3F1Oaq8ziXzT16Ezuz_sqqoQqI2JHSY",   # Praise 4
    "OLAK5uy_mf1_0w2DUAvqymKJmluuNe2fUijPEwD5s", # Praise 5
    "OLAK5uy_mYWJaA_Pjps7f--t5aVxV9jN9JH4nYxGM", # Praise 7
    "PLmczvSV0WZ47uvS70C6cvy35RZtblRUZE", # Bob Fitts
    "PL8O2zIwxuu1C1OP9krsTXXaSnR799qgo9", # outras m√∫sicas
    "OLAK5uy_l3-EoBIiArAc7qJjeV1LhpDX4sb43Hw4M", # Vencedores por Cristo
    "PLzWjmBOf3rY3hAXmvMI1-W52a23u-3U4o" # harpa crist√£
]

# Fun√ß√£o para obter v√≠deos de uma playlist espec√≠fica
def obter_videos_da_playlist(playlist_id):
    videos = []
    try:
        next_page_token = None
        while True:
            # Requisi√ß√£o para obter os v√≠deos da playlist
            playlist_response = youtube.playlistItems().list(
                playlistId=playlist_id,
                part="snippet",
                maxResults=50,
                pageToken=next_page_token
            ).execute()

            videos.extend([
                {
                    "title": item["snippet"]["title"],
                    "videoId": item["snippet"]["resourceId"]["videoId"]
                }
                for item in playlist_response.get("items", [])
            ])

            # Verificar se h√° mais p√°ginas de resultados
            next_page_token = playlist_response.get("nextPageToken")
            if not next_page_token:
                break
    except Exception as e:
        print(f"Erro ao buscar v√≠deos da playlist {playlist_id}: {e}")

    return videos

# Comando de m√∫sica
@client.command()
async def musica(ctx):
    # Escolher uma playlist aleat√≥ria
    playlist_id = random.choice(PLAYLISTS_FIXAS)

    # Obter os v√≠deos da playlist escolhida
    videos = obter_videos_da_playlist(playlist_id)
    if not videos:
        await ctx.send("N√£o consegui encontrar v√≠deos na playlist escolhida. Tente novamente mais tarde.")
        return

    # Escolher um v√≠deo aleat√≥rio
    video = random.choice(videos)
    video_url = f"https://www.youtube.com/watch?v={video['videoId']}"
    video_title = video['title']

    # Enviar a m√∫sica escolhida
    await ctx.send(f"Aqui est√° uma m√∫sica aleat√≥ria da playlist escolhida:\n**{video_title}**\n{video_url}")

# Fun√ß√£o para buscar m√∫ltiplos vers√≠culos (sempre em ALMEIDA) com controle de erro
def buscar_versiculos(referencias, tentativas=3):
    versiculos = []
    
    for referencia in referencias:
        tentativas_falhas = 0
        versiculo_encontrado = False
        
        while tentativas_falhas < tentativas:
            url = f"https://bible-api.com/{referencia}?translation=ALMEIDA"
            try:
                response = requests.get(url)
                
                if response.status_code == 200:
                    dados = response.json()
                    texto = dados.get("text", "")
                    if texto:
                        versiculos.append(f"{referencia}: {texto}")
                        versiculo_encontrado = True
                        break
                    else:
                        versiculos.append(f"Refer√™ncia {referencia} n√£o encontrada ou inv√°lida.")
                        versiculo_encontrado = True
                        break
                else:
                    tentativas_falhas += 1
                    versiculos.append(f"Erro ao buscar {referencia}. C√≥digo de status: {response.status_code}. Tentando novamente...")
                    time.sleep(2)  # Pausa de 2 segundos antes da nova tentativa
            except requests.exceptions.RequestException as e:
                tentativas_falhas += 1
                versiculos.append(f"Erro de conex√£o ao buscar {referencia}: {e}. Tentando novamente...")
                time.sleep(2)  # Pausa de 2 segundos antes da nova tentativa
        
        if not versiculo_encontrado:
            versiculos.append(f"N√£o foi poss√≠vel encontrar o vers√≠culo {referencia} ap√≥s {tentativas} tentativas.")

    return versiculos

# Normalizar o nome do livro (min√∫sculas e sem acento)
def normalizar_livro(nome_livro):
    return unidecode(nome_livro.lower())

# Fun√ß√£o para buscar vers√≠culos de forma ordenada
def versiculos_ordenados():
    livros = ["G√™nesis", "√äxodo", "Lev√≠tico", "N√∫meros", "Deuteron√¥mio", "Josu√©", "Ju√≠zes", "Rute", 
              "1 Samuel", "2 Samuel", "1 Reis", "2 Reis", "1 Cr√¥nicas", "2 Cr√¥nicas", "Esdras", "Neemias", 
              "Ester", "J√≥", "Salmos", "Prov√©rbios", "Eclesiastes", "C√¢nticos", "Isa√≠as", "Jeremias", 
              "Lamenta√ß√µes", "Ezequiel", "Daniel", "Oseias", "Joel", "Am√≥s", "Obadias", "Jonas", "Miqueias", 
              "Naum", "Habacuque", "Sofonias", "Ageu", "Zacarias", "Malaquias", "Mateus", "Marcos", "Lucas", 
              "Jo√£o", "Atos", "Romanos", "1 Cor√≠ntios", "2 Cor√≠ntios", "G√°latas", "Ef√©sios", "Filipenses", 
              "Colossenses", "1 Tessalonicenses", "2 Tessalonicenses", "1 Tim√≥teo", "2 Tim√≥teo", "Tito", 
              "Filemom", "Hebreus", "Tiago", "1 Pedro", "2 Pedro", "1 Jo√£o", "2 Jo√£o", "3 Jo√£o", "Judas", "Apocalipse"]
    
    livro = random.choice(livros)
    capitulo_inicial = random.randint(1, 50)
    versiculo_inicial = random.randint(1, 20)

    versiculos = []
    for i in range(3):
        capitulo = capitulo_inicial
        versiculo = versiculo_inicial + i
        referencia = f"{livro} {capitulo}:{versiculo}"
        url = f"https://bible-api.com/{referencia}?translation=ALMEIDA"
        try:
            response = requests.get(url)
            if response.status_code == 200:
                dados = response.json()
                texto = dados.get("text", "")
                versiculos.append(f"{referencia}: {texto}")
            else:
                versiculos.append(f"{referencia}: Vers√≠culo n√£o encontrado.")
        except requests.exceptions.RequestException:
            versiculos.append(f"{referencia}: Erro de conex√£o.")
    
    return "\n\n".join(versiculos)

# Comando de vers√≠culo
@client.command()
async def versiculo(ctx, *, referencias: str):
    referencias = [ref.strip() for ref in referencias.split(",")]

    referencias_expandidas = []
    for referencia in referencias:
        if "-" in referencia:
            try:
                livro_capitulo, intervalo = referencia.split(" ", 1)
                livro_capitulo = normalizar_livro(livro_capitulo)
                capitulo, versiculos = intervalo.split(":")
                versiculo_inicial, versiculo_final = versiculos.split("-")

                for versiculo in range(int(versiculo_inicial), int(versiculo_final) + 1):
                    referencias_expandidas.append(f"{livro_capitulo} {capitulo}:{versiculo}")
            except ValueError:
                await ctx.send(f"Erro no formato da refer√™ncia: {referencia}. Esperado formato: **'Livro Cap√≠tulo:Vers√≠culo'**.")
                return
        else:
            livro_capitulo = referencia.split(" ")[0]
            livro_capitulo = normalizar_livro(livro_capitulo)
            referencias_expandidas.append(referencia.replace(referencia.split(" ")[0], livro_capitulo))

    # Chamar a fun√ß√£o de buscar os vers√≠culos
    versiculos = buscar_versiculos(referencias_expandidas)

    # Enviar os resultados
    for resultado in versiculos:
        await ctx.send(resultado)


# BUSCAR CAP√çTULO


# Fun√ß√£o para buscar um cap√≠tulo ou livro no banco de dados
def buscar_capitulo_ou_livro(livro, capitulo=None):
    # Caminho para o arquivo do banco de dados
    db_path = "almeida_rc.sqlite"  # Ajuste conforme necess√°rio

    # Dicion√°rio para mapear os nomes dos livros aos seus IDs
    livros = {
        1: "G√™nesis", 2: "√äxodo", 3: "Lev√≠tico", 4: "N√∫meros", 5: "Deuteron√¥mio", 6: "Josu√©", 7: "Ju√≠zes", 8: "Rute", 9: "1 Samuel", 10: "2 Samuel", 11: "1 Reis", 12: "2 Reis", 13: "1 Cr√¥nicas", 14: "2 Cr√¥nicas", 15: "Esdras", 16: "Neemias", 17: "Ester", 18: "J√≥", 19: "Salmos", 20: "Prov√©rbios", 21: "Eclesiastes", 22: "C√¢nticos", 23: "Isa√≠as", 24: "Jeremias", 25: "Lamenta√ß√µes", 26: "Ezequiel", 27: "Daniel", 28: "Os√©ias", 29: "Joel", 30: "Am√≥s", 31: "Obadias", 32: "Jonas", 33: "Miqueias", 34: "Naum", 35: "Habacuque", 36: "Sofonias", 37: "Ageu", 38: "Zacarias", 39: "Malaquias", 40: "Mateus", 41: "Marcos", 42: "Lucas", 43: "Jo√£o", 44: "Atos", 45: "Romanos", 46: "1 Cor√≠ntios", 47: "2 Cor√≠ntios", 48: "G√°latas", 49: "Ef√©sios", 50: "Filipenses", 51: "Colossenses", 52: "1 Tessalonicenses", 53: "2 Tessalonicenses", 54: "1 Tim√≥teo", 55: "2 Tim√≥teo", 56: "Tito", 57: "Filemom", 58: "Hebreus", 59: "Tiago", 60: "1 Pedro", 61: "2 Pedro", 62: "1 Jo√£o", 63: "2 Jo√£o", 64: "3 Jo√£o", 65: "Judas", 66: "Apocalipse"
    }

    # Inverter o dicion√°rio para permitir busca pelo nome do livro
    nome_para_id = {nome.lower(): id for id, nome in livros.items()}

    # Verificar se o livro existe
    livro_id = nome_para_id.get(livro.lower())
    if not livro_id:
        return f"üìñ Livro '{livro}' n√£o encontrado. Verifique o nome e tente novamente."

    # Conectar ao banco de dados
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # Consulta com ou sem cap√≠tulo
    if capitulo:
        query = "SELECT chapter, verse, text FROM Verses WHERE book = ? AND chapter = ?"
        cursor.execute(query, (livro_id, capitulo))
    else:
        query = "SELECT chapter, verse, text FROM Verses WHERE book = ?"
        cursor.execute(query, (livro_id,))

    # Buscar resultados
    resultados = cursor.fetchall()
    conn.close()

    # Verificar se h√° resultados
    if not resultados:
        return f"üìñ Nenhum vers√≠culo encontrado para o livro '{livro}'{f' cap√≠tulo {capitulo}' if capitulo else ''}."

    # Formatar os resultados
    resposta = []
    for chapter, verse, text in resultados:
        resposta.append(f"üìñ **{livro} {chapter}:{verse}** - {text}")

    return "\n".join(resposta)

# Comando para buscar um cap√≠tulo ou livro inteiro
@client.command()
async def capitulo(ctx, livro: str, capitulo: int = None):
    await ctx.send("üîç Buscando no banco de dados...")
    try:
        resultado = buscar_capitulo_ou_livro(livro, capitulo)
        
        # Dividir o texto em partes menores para enviar no Discord
        partes = dividir_texto(resultado, limite=2000)  # Fun√ß√£o divide texto maior que 2000 caracteres
        for parte in partes:
            await ctx.send(parte)
    except Exception as e:
        await ctx.send(f"‚ö†Ô∏è Ocorreu um erro ao realizar a busca: {e}")


# PESQUISA POR TEMA


# Dicion√°rio que mapeia n√∫meros dos livros para seus nomes
livros_dict = {
    1: "G√™nesis", 2: "√äxodo", 3: "Lev√≠tico", 4: "N√∫meros", 5: "Deuteron√¥mio",
    6: "Josu√©", 7: "Ju√≠zes", 8: "Rute", 9: "1 Samuel", 10: "2 Samuel",
    11: "1 Reis", 12: "2 Reis", 13: "1 Cr√¥nicas", 14: "2 Cr√¥nicas", 15: "Esdras",
    16: "Neemias", 17: "Ester", 18: "J√≥", 19: "Salmos", 20: "Prov√©rbios",
    21: "Eclesiastes", 22: "C√¢nticos", 23: "Isa√≠as", 24: "Jeremias", 25: "Lamenta√ß√µes",
    26: "Ezequiel", 27: "Daniel", 28: "Os√©ias", 29: "Joel", 30: "Am√≥s",
    31: "Obadias", 32: "Jonas", 33: "Miqueias", 34: "Naum", 35: "Habacuque",
    36: "Sofonias", 37: "Ageu", 38: "Zacarias", 39: "Malaquias", 40: "Mateus",
    41: "Marcos", 42: "Lucas", 43: "Jo√£o", 44: "Atos", 45: "Romanos",
    46: "1 Cor√≠ntios", 47: "2 Cor√≠ntios", 48: "G√°latas", 49: "Ef√©sios", 50: "Filipenses",
    51: "Colossenses", 52: "1 Tessalonicenses", 53: "2 Tessalonicenses", 54: "1 Tim√≥teo",
    55: "2 Tim√≥teo", 56: "Tito", 57: "Filemom", 58: "Hebreus", 59: "Tiago",
    60: "1 Pedro", 61: "2 Pedro", 62: "1 Jo√£o", 63: "2 Jo√£o", 64: "3 Jo√£o",
    65: "Judas", 66: "Apocalipse"
}

# Fun√ß√£o para normalizar texto (remover acentos e converter para min√∫sculas)
def normalizar_texto(texto):
    texto = unicodedata.normalize('NFD', texto)  # Decompor caracteres acentuados
    texto = ''.join(ch for ch in texto if unicodedata.category(ch) != 'Mn')  # Remover marcas de acento
    return texto.lower()  # Converter para min√∫sculas

# Fun√ß√£o para buscar vers√≠culos por palavra-chave (somente palavras inteiras e normalizadas)
async def buscar_por_palavra_exata(palavra):
    db_path = "almeida_rc.sqlite"  # Caminho para o banco de dados

    # Normalizar a palavra-chave
    palavra_normalizada = normalizar_texto(palavra)

    # Conectar ao banco de dados
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # Obter todos os vers√≠culos do banco de dados
    query = "SELECT book, chapter, verse, text FROM Verses"
    cursor.execute(query)
    resultados = cursor.fetchall()
    conn.close()

    # Filtrar os resultados localmente com a palavra-chave normalizada
    versiculos_filtrados = [
        (book, chapter, verse, text) 
        for book, chapter, verse, text in resultados 
        if palavra_normalizada in normalizar_texto(text)
    ]

    # Limitar a quantidade de vers√≠culos a 7
    versiculos_filtrados = versiculos_filtrados[:7]

    return versiculos_filtrados

# Fun√ß√£o para dividir texto longo em partes menores (limite de 2000 caracteres por mensagem)
def dividir_texto(texto, limite=2000):
    partes = []
    while len(texto) > limite:
        # Encontrar o √∫ltimo '\n' antes do limite
        corte = texto.rfind("\n", 0, limite)
        if corte == -1:  # N√£o encontrou um '\n', cortar no limite
            corte = limite
        partes.append(texto[:corte])
        texto = texto[corte:]
    partes.append(texto)
    return partes

@client.command()
async def pesquisar(ctx, *, palavra: str):
    await ctx.send("üîç Buscando no banco de dados...")

    try:
        versiculos_filtrados = await buscar_por_palavra_exata(palavra)

        # Se houver vers√≠culos filtrados, formatar a resposta
        if versiculos_filtrados:
            # Substituir o n√∫mero do livro pelo nome no formato
            resposta = "\n".join(
                [f"üìñ **{livros_dict.get(book, book)} {chapter}:{verse}** - {text}" 
                 for book, chapter, verse, text in versiculos_filtrados]
            )

            # Dividir a resposta em partes menores, respeitando o limite de 2000 caracteres
            partes = dividir_texto(resposta)

            # Enviar as partes no Discord
            for parte in partes:
                await ctx.send(parte)
        else:
            await ctx.send(f"Nenhum resultado encontrado para '{palavra}'.")
    
    except Exception as e:
        await ctx.send(f"‚ö†Ô∏è Ocorreu um erro ao realizar a busca: {e}")






# Evento de boas-vindas com embed
@client.event
async def on_member_join(member):
    channel_id = CHANNEL_ID
    channel = client.get_channel(channel_id)

    if channel:
        embed = discord.Embed(
            title="üéâ Bem-vindo(a) ao Bible Search!",
            description=(f"Ol√°, {member.mention}! Seja bem-vindo ao servidor **{member.guild.name}**! üòä\n\n"
                         "Confira abaixo algumas regras importantes para manter tudo organizado e divertido:"),
            color=0x00aaff
        )
        embed.add_field(
            name="üìú Regras do Servidor:",
            value=(
                "1Ô∏è‚É£ **Seja gentil e educado com todos;**\n"
                "2Ô∏è‚É£ **Evite spam ou links desnecess√°rios;**\n"
                "3Ô∏è‚É£ **Use os canais nos temas certos;**\n"
                "4Ô∏è‚É£ **Compartilhe apenas conte√∫dos seguros e adequados;**\n"
                "5Ô∏è‚É£ **Respeite as diretrizes do Discord.**"
            ),
            inline=False
        )
        embed.set_thumbnail(url=member.avatar.url if member.avatar else None)
        embed.set_footer(text=f"Agora somos {len(member.guild.members)} membros!")
        await channel.send(embed=embed)

# Comando para exibir as regras novamente
@client.command()
async def regras(ctx):
    embed = discord.Embed(
        title="Regras",
        description="Confira as regras para mantermos um ambiente saud√°vel e divertido.",
        color=0x00aaff
    )
    embed.add_field(
        name="üìú Regras do Servidor:",
        value=( 
            "1Ô∏è‚É£ **Seja gentil e educado com todos;**\n"
            "2Ô∏è‚É£ **Evite spam ou links desnecess√°rios;**\n"
            "3Ô∏è‚É£ **Use os canais nos temas certos;**\n"
            "4Ô∏è‚É£ **Compartilhe apenas conte√∫dos seguros e adequados;**\n"
            "5Ô∏è‚É£ **Respeite as diretrizes do Discord.**"
        ),
        inline=False
    )
    await ctx.send(embed=embed)

# Comando para exibir todos os comandos dispon√≠veis (agora com o nome "ajuda")
@client.command()
async def ajuda(ctx):
    embed = discord.Embed(
        title="Comandos Dispon√≠veis",
        description="Aqui est√£o todos os comandos que voc√™ pode usar.",
        color=0x00aaff
    )
    embed.add_field(
        name="-versiculo [refer√™ncia] üìñ",
        value="Retorna um ou mais vers√≠culos conforme a refer√™ncia fornecida. Exemplo: '-versiculo Jo√£o 3:16' ou '-versiculo Mateus 5:3-10'.",
        inline=False
    )
    embed.add_field(
        name="-capitulo [refer√™ncia] üìñ",
        value="Retorna um cap√≠tulo inteiro conforme a refer√™ncia fornecida. Exemplo: '-versiculo G√™nesis 1'.",
        inline=False
    )
    embed.add_field(
        name="-regras üìú",
        value="Exibe as regras do servidor para todos os membros conhecerem.",
        inline=False
    )
    embed.add_field(
        name="-ajuda ‚ùî",
        value="Exibe todos os comandos dispon√≠veis no bot.",
        inline=False
    )
    embed.add_field(
        name="-musica üé∂",
        value="Escolhe uma m√∫sica aleat√≥ria de uma playlist aleat√≥ria da base de dados.",
        inline=False
    ) 
    embed.add_field(
        name="-pesquisar üîç",
        value="Pesquise vers√≠culos por palavra-chave ou tema na base de dados da B√≠blia.",
        inline=False
    ) 
    embed.add_field(
        name="Mensagem Di√°ria üì´",
        value="O bot envia vers√≠culos aleat√≥rios diariamente √†s 21h.",
        inline=False
    )
    
    await ctx.send(embed=embed)

# Evento on_ready com l√≥gica para vers√≠culos di√°rios
@client.event
async def on_ready():
    print(f"Conectado como {client.user}")
    
    # Configurar o hor√°rio para o evento di√°rio (21h)
    channel_id = CHANNEL_ID
    channel = client.get_channel(channel_id)
    
    while True:
        agora = datetime.now()
        proximo_envio = agora.replace(hour=21, minute=0, second=0, microsecond=0)
        if agora >= proximo_envio:
            proximo_envio += timedelta(days=1)

        tempo_espera = (proximo_envio - agora).total_seconds()

        print(f"O rob√¥ est√° esperando para enviar a mensagem √†s {proximo_envio.strftime('%H:%M:%S')}.")
        await asyncio.sleep(tempo_espera)

        mensagem = versiculos_ordenados()
        await channel.send(f"üì´ **Mensagem Di√°ria:**\n\n{mensagem}")
        print("Mensagem enviada.")

# Configura√ß√£o e execu√ß√£o do bot
client.run(BOT_TOKEN)
